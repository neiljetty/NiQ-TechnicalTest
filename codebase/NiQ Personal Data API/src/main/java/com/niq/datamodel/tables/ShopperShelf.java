/*
 * This file is generated by jOOQ.
 */
package com.niq.datamodel.tables;


import com.niq.datamodel.Indexes;
import com.niq.datamodel.Keys;
import com.niq.datamodel.Niq;
import com.niq.datamodel.tables.records.ShopperShelfRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShopperShelf extends TableImpl<ShopperShelfRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>NIQ.SHOPPER_SHELF</code>
     */
    public static final ShopperShelf SHOPPER_SHELF = new ShopperShelf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopperShelfRecord> getRecordType() {
        return ShopperShelfRecord.class;
    }

    /**
     * The column <code>NIQ.SHOPPER_SHELF.SHOPPER_ID</code>.
     */
    public final TableField<ShopperShelfRecord, String> SHOPPER_ID = createField(DSL.name("SHOPPER_ID"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>NIQ.SHOPPER_SHELF.PRODUCT_ID</code>.
     */
    public final TableField<ShopperShelfRecord, String> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>NIQ.SHOPPER_SHELF.RELEVANCY_SCORE</code>.
     */
    public final TableField<ShopperShelfRecord, BigDecimal> RELEVANCY_SCORE = createField(DSL.name("RELEVANCY_SCORE"), SQLDataType.NUMERIC, this, "");

    private ShopperShelf(Name alias, Table<ShopperShelfRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShopperShelf(Name alias, Table<ShopperShelfRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>NIQ.SHOPPER_SHELF</code> table reference
     */
    public ShopperShelf(String alias) {
        this(DSL.name(alias), SHOPPER_SHELF);
    }

    /**
     * Create an aliased <code>NIQ.SHOPPER_SHELF</code> table reference
     */
    public ShopperShelf(Name alias) {
        this(alias, SHOPPER_SHELF);
    }

    /**
     * Create a <code>NIQ.SHOPPER_SHELF</code> table reference
     */
    public ShopperShelf() {
        this(DSL.name("SHOPPER_SHELF"), null);
    }

    public <O extends Record> ShopperShelf(Table<O> child, ForeignKey<O, ShopperShelfRecord> key) {
        super(child, key, SHOPPER_SHELF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Niq.NIQ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SHOPPER_SHELF_PRODUCT);
    }

    @Override
    public UniqueKey<ShopperShelfRecord> getPrimaryKey() {
        return Keys.SHOPPER_SHELF_PK;
    }

    @Override
    public List<ForeignKey<ShopperShelfRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SHOPPER_SHELF_PRODUCT);
    }

    private transient Product _product;

    /**
     * Get the implicit join path to the <code>NIQ.PRODUCT</code> table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.FK_SHOPPER_SHELF_PRODUCT);

        return _product;
    }

    @Override
    public ShopperShelf as(String alias) {
        return new ShopperShelf(DSL.name(alias), this);
    }

    @Override
    public ShopperShelf as(Name alias) {
        return new ShopperShelf(alias, this);
    }

    @Override
    public ShopperShelf as(Table<?> alias) {
        return new ShopperShelf(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopperShelf rename(String name) {
        return new ShopperShelf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopperShelf rename(Name name) {
        return new ShopperShelf(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopperShelf rename(Table<?> name) {
        return new ShopperShelf(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
